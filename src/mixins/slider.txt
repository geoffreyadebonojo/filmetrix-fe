 // slider.oninput = function() {
      //   store.graphSettings.a = 100 - +this.value
      //   store.graphSettings.b = +this.value

      //   scaleA = store.graphSettings.a / scale
      //   scaleB = store.graphSettings.b / scale
        
      //   let vis

      //   groupA.select("circle").style("transform", `scale(${(scaleA)})`)
      //   groupA.select("image").style("transform", `scale(${(scaleA)})`)
      //   groupA.style("display", (d) => {
      //     vis = store.graphSettings.a < 3 ? 'none' : "block"
      //     d3.selectAll(`.link[target='${d.id}']`).style("display", vis)

      //     return vis
      //   })
        
      //   groupB.select("circle").style("transform", `scale(${(scaleB)})`)
      //   groupB.select("image").style("transform", `scale(${(scaleB)})`)
      //   groupB.style("display", (d) => {
      //     vis = store.graphSettings.b < 3 ? 'none' : "block"
      //     d3.selectAll(`.link[target='${d.id}']`).style("display", vis)

      //     return vis
      //   })


      //   simulation
      //   .force('collide', d3.forceCollide((d) => {
      //     if (d.type.includes(groupASelector) && d.type.includes(groupBSelector)) {
      //       return (store.graphSettings.a + store.graphSettings.b)/2
      //     } else if (d.type.includes(groupASelector)) {
      //       return store.graphSettings.a
      //     } else if (d.type.includes(groupBSelector)) {
      //       return store.graphSettings.b 
      //     }
      //     // } else if (d.entity == 'person') {
      //       // return neutralSettings
      //     // }
      //     return defaultSettings.collide
      //   }))
      //   .force("link", d3.forceLink(links).id(d => d.id).distance((d) => {
      //     // base this on the character name length
      //     if (d.target.type.includes(groupASelector) && d.target.type.includes(groupBSelector)) {
      //       return (store.graphSettings.a + store.graphSettings.b)/2
      //     } else if (d.target.type.includes(groupASelector)) {
      //       return store.graphSettings.a
      //     } else if (d.target.type.includes(groupBSelector)) {
      //       return store.graphSettings.b
      //     }
      //     // } else if (d.entity == 'person') {
      //     //   return neutralSettings
      //     // }
      //     return defaultSettings.linkLength
      //   }))
      //   .force("charge", d3.forceManyBody().strength((d) => {

      //     if (d.type.includes(groupASelector) && d.type.includes(groupBSelector)) {
      //       return (store.graphSettings.a + store.graphSettings.b)/2
      //     } else if (d.type.includes(groupASelector)) {
      //       return -store.graphSettings.a 
      //     } else if (d.type.includes(groupBSelector)) {
      //       return -store.graphSettings.b 
      //     }
      //     // } else if (d.entity == 'person') {
      //     //   return neutralSettings
      //     // }
      //     return defaultSettings.charge
      //   }))
      //   .alpha(0.2)
      //   .alphaMin(0.1)
      //   .restart()
      // }
  